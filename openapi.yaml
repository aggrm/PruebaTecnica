openapi: 3.0.0
info:
  title: User and Houses API
  version: 1.0.0
  description: API for managing users and their houses
servers:
  - url: http://localhost:3000/api
tags:
  - name: Usuarios
    description: Endpoints relacionados con la gestión de usuarios
  - name: Viviendas
    description: Endpoints relacionados con la gestión de viviendas
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
    House:
      type: object
      properties:
        id:
          type: string
          example: "67890"
        city:
          type: string
          example: "New York"
        street:
          type: string
          example: "5th Avenue"
        country:
          type: string
          example: "USA"
        userId:
          type: string
          example: "12345"
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
security:
  - bearerAuth: []
paths:
  /auth/token:
    post:
      tags:
        - Usuarios
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
        '401':
          description: Authentication failed
  /users:
    get:
      tags:
        - Usuarios
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    post:
      tags:
        - Usuarios
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /users/{userId}:
    get:
      tags:
        - Usuarios
      summary: Get a single user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    patch:
      tags:
        - Usuarios
      summary: Partially update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Unauthorized
    put:
      tags:
        - Usuarios
      summary: Fully update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Unauthorized
    delete:
      tags:
        - Usuarios
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: User has associated houses
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /users/{userId}/houses:
    get:
      tags:
        - Viviendas
      summary: Get all houses of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: city
          in: query
          required: false
          schema:
            type: string
        - name: street
          in: query
          required: false
          schema:
            type: string
        - name: country
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of houses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/House'
        '404':
          description: User not found
    post:
      tags:
        - Viviendas
      summary: Create a new house for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
      responses:
        '201':
          description: House created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
        '400':
          description: Invalid input
        '404':
          description: User not found
  /users/{userId}/houses/{houseId}:
    put:
      tags:
        - Viviendas
      summary: Update a house of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: houseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/House'
      responses:
        '200':
          description: House updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/House'
        '400':
          description: Invalid input
        '404':
          description: User or house not found
    delete:
      tags:
        - Viviendas
      summary: Delete a house of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: houseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: House deleted successfully
        '404':
          description: User or house not found